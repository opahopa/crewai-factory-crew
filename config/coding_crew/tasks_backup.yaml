analyze_requirements:
  description: >
    Our goal is to implement a CrewAI project for a customer. The job is split between 2 teams: 
    DesignCrew and CodingCrew. this is the task for the CodingCrew team. DesignCrew has already
    analyzed the requirements and provided the output which includes the agents, tasks, and the input data sample 
    for the crew we are making. 
    We, as CodingCrew, need to analyze the DesignCrew output and implement the output crewai project files.
    
    FIRST STEP: Examine the design crew result input:{design_crew_result}. If the input is empty or less than 15 characters:
    1. Load and read the file from: output_{crew_name}/config/design_result.yaml
    2. Use the loaded content for the analysis
    3. If file loading fails, stop and report the error
    
    SECOND STEP: Using the valid design crew result (either from input or file), create a detailed technical 
    specification document that includes:
      - Tool requirements per agent
      - LLM requirements per agent
      - Data flow between tasks
      - Output formats and structures
      - Required environment variables
      - Error handling strategy

    If no DesignCrew output is available(output string length < 15 symbols), load it from `output_{crew_name}/config/design_result.yaml`.

    When choosing the tools for the agents, refer to the provided knowledge source for the tools available in CrewAI framework.
    If none of the tools fit the requirements fallback to https://python.langchain.com/docs/integrations/tools/ for langchain tools.
    If none of langchain tools fit - provide a detailed requirements for the custom tool.
    
    Refer to your Knowledge Source for crewAI docs
  expected_output:
    A comprehensive markdown document containing implementation recommendations
  agent: architect

design_project_structure:
  description: >
    Based on the requirements analysis, design a complete project structure:

    1. Core Directories:
       - main.py: Entry point. Initialize environment and run crew
       - crew.py: Crew definitions
       - config/: Configuration files (already existing)
       - /tools: Custom tools
         - __init__.py
         - `tool_name`.py: Each custom tool
       - /helpers: Utility functions
         - __init__.py
         - formatting.py: Output formatting
         - utils.py: General utilities
       - /models: Data models
         - __init__.py
         - `model_name`.py: Pydantic models
       - /tests: Test suite
         - __init__.py
         - test_`component`.py: Component tests
       - /docs: Documentation
         - README.md

    2. Configuration Files:
       - requirements.txt
       - .env.example
       - .gitignore

    3. Define:
       - Module relationships
       - Import structure
       - Configuration management
       - Environment setup

    Ensure the structure follows CrewAI best practices and patterns. (your Knowledge Source)
  expected_output:
    A detailed markdown document containing
    - Complete directory structure
    - File organization
    - Module relationships
    - Configuration approach
    - Implementation guidelines
  agent: architect

implement_core_modules:
  description: >
    Implement core project modules based on the approved design:

    1. Setup Project Infrastructure:
       - Initialize all directories
       - Create __init__.py files
       - Setup base configuration files

    2. Implement Core Utilities:
       - Environment configuration manager
       - Logging setup
       - Error handling utilities
       - Type definitions
       - Constants and enums

    3. Create Base Classes:
       - Custom exceptions
       - Abstract base classes
       - Utility decorators
       - Common interfaces

    4. Setup Configuration Management:
       - Environment variable handling
       - YAML configuration loader

    IMPORTANT:
    - Follow PEP 8 style guide
    - Include type hints
    - Add docstrings for all modules
    - Implement proper error handling
    - Add logging statements
    
    Check the provided knowledge source for reference.
  expected_output: >
    Implemented core modules, written in  with:
    - Complete directory structure
    - Base utility functions
    - Configuration management
    - Type definitions
    - Error handling
  agent: developer

implement_crew_logic:
  description: >
    Implement crew.py:
    - Configure agents with LLMs and tools
    - Define task sequence and dependencies
    - Setup crew with process type and memory
    - Integrate error handling and logging
    
    Code must be executable, properly typed, and follow provided CrewAI examples.
    Check the provided knowledge source for reference.
    The agents and tasks yaml files are already existing in `output_{crew_name}/config` directory.
    The contents are: """{design_crew_result}""". If not available, load from `output_{crew_name}/config/design_result.yaml`.
  expected_output:
    Python code that matches CrewAI implementation patterns from documentation.
    Return ONLY the Python code, no descriptions, comments or explanations.
    DO NOT SAVE it anywhere.
  agent: developer

implement_support_files:
  description: >
    Create project files:
    - main.py: Entry point with env setup and crew initialization
    - tools/: Custom tool implementations
    - helpers/: Utility functions and formatters
    - models/: Pydantic models
    - tests/: Test suite setup
    - docs/: Project documentation
    Include requirements.txt, environment configs and README.md.
    
    Each file must be properly documented and follow Python best practices.
  expected_output: >
    All required project files properly implemented and organized, 
    saved in filesystem, working directory: `output_{crew_name}`
    Before writing ensure that the code is actually executable.
  agent: developer

review_implementation:
  description: >
    Review the complete implementation ensuring:
    - Code quality and best practices
    - Documentation completeness
    - Requirements fulfillment 
    - Integration correctness
    Provide detailed feedback for improvements.
    
    Ensure that the created implementation is done according to the DesignCrew output: 
    `output_{crew_name}/config/design_result.yaml`.
  expected_output: A comprehensive review report with specific improvement recommendations
  agent: technical_lead

implement_review_changes:
  description: >
    Implement review recommendations provided by technical_lead
  expected_output: >
    Code changes implementing review recommendations, working directory: `output_{crew_name}`
    ONLY the code, no descriptions, comments or explanations, no ``` wrappers around the code.
    Before writing ensure that the code is actually executable.
  agent: developer

implement_tests:
  description: >
    Create test suite:
    - Unit tests for agents, tasks, tools, helpers
    - Integration tests for crew workflow
    - E2E tests for complete execution
    - Test fixtures and utilities
    Use pytest, include coverage reporting
  expected_output: Complete test suite with coverage report
  agent: qa_engineer

execute_tests:
  description: >
    Run test suite:
    - Configure test environment
    - Execute unit, integration, E2E tests
    - Generate coverage report
    - Document failures and recommendations
  expected_output: Test results with coverage metrics and recommendations
  agent: qa_engineer




verify_changes:
  description: >
    Verify implemented changes:
    - Review code updates
    - Run test suite
    - Check documentation
    - Assess remaining issues
    - Recommend next steps
  expected_output: Verification report with final recommendations
  agent: technical_lead
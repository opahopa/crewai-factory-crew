ZnJvbSBjcmV3YWkgimportBhZ2VudCwgQ3JldywgUHJvY2VzcywgVGFzawpmcm9tIGNyZXdhaS5wcm9qZWN0IGltcG9ydCBDcmV3QmFzZSwgYWdlbnQsIGNyZXcsIHRhc2sKCiMgbWlnaHQgbmVlZCBnbG9iYWwgYGBtYWdpY2BgIGluc3RhbGxlZDogYnJldyBpbnN0YWxsIG1hZ2ljCmZyb20gY3Jld2FpLmtub3dsZWRnZS5zb3VyY2Uuc3RyaW5nX2tub3dsZWRnZV9zb3VyY2UgaW1wb3J0IFN0cmluZ0tub3dsZWRnZVNvdXJjZQpmcm9tIGNyZXdhaSBpbXBvcnQgTExNCgpmcm9tIGNyZXdhaV90b29scyBpbXBvcnQgKFJlcGVyRGV2VG9vbCwgV2Vic2l0ZVNlYXJjaFRvb2wsIEZpbGVSZWFkVG9vbCwKICAgICAgICAgICAgICAgICAgICAgICAgICBDb2RlSW50ZXJwcmV0ZXJUb29sLCBGaWxlV3JpdGVyVG9vbCwgU2NyYXBlV2Vic2l0ZVRvb2wsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIERpcmVjdG9yeVNlYXJjaFRvb2wpCgpmcm9tIGNyZXdhaV90b29scyBpbXBvcnQgRGlyZWN0b3J5UmVhZFRvb2wsIEZpbGVSZWFkVG9vbApmcm9tIGNyZXdhaV90b29scy50b29scy5jb2RlX2RvY3Nfc2VhcmNoX3Rvb2wuY29kZV9kb2NzX3NlYXJjaF90b29sIGltcG9ydCBDb2RlRG9jc1NlYXJjaFRvb2wKCmZyb20gaGVscGVycy5nZXRfZG9jc19zdHJpbmcgaW1wb3J0IExvY2FsVHhURmlsZUtub3dsZWRnZVNvdXJjZQpmcm9tIGhlbHBlcnMuaGVscGVyIGltcG9ydCB2YWxpZGF0ZV9hbmRfc2F2ZV95YW1sX2Zyb21fcHlkYW50aWNfbGlzdCwgd3JpdGVfcmV2aWV3X2NoYW5nZXNfY2FsbGJhY2sKZnJvbSBtb2RlbHMgaW1wb3J0IFRhc2tzTW9kZWwsIEFnZW50c01vZGVsCmZyb20gdG9vbHMuZmlsZXNfbGFuZ2NoYWluIGltcG9ydCBGaWxlTWFuYWdlbWVudFRvb2wKZnJvbSB0b29scy5zaGVsbF90b29sIGltcG9ydCBTaGVsbENvbW1hbmRUb29sCmZyb20gdG9vbHMucGxheXdyaWdodF90b29sIGltcG9ydCBQbGF5d3JpZ2h0VG9vbAoKc2hlbGxfdG9vbCA9IFNoZWxsQ29tbWFuZFRvb2woKQlmaWxlX3JlYWRfdG9vbCA9IEZpbGVSZWFkVG9vbCgpCmZpbGVfd3JpdGVfdG9vbCA9IEZpbGVXcml0ZXJUb29sKCkKc2VhcmNoX3Rvb2wgPSBTZXJwZXJEZXZUb29sKCkKd2ViX3JhZ190b29sID0gV2Vic2l0ZVNlYXJjaFRvb2woKQpjb2RlX2ludGVycHJldGVyX3Rvb2wgPSBDb2RlSW50ZXJwcmV0ZXJUb29sKCkKcGxheXdyaWdodF90b29sID0gUGxheXdyaWdodFRvb2woKQpzY3JhcGVfd2Vic2l0ZV90b29sID0gU2NyYXBlV2Vic2l0ZVRvb2woKQpkb2NzU2VhcmNoVG9vbCA9IERpcmVjdG9yeVNlYXJjaFRvb2woZGlyZWN0b3J5PScuL2RvY3NfY3Jld2FpJykKZG9jc1NlYXJjaFJhZ1Rvb2wgPSBDb2RlRG9jc1NlYXJjaFRvb2woZG9jc191cmw9J2h0dHBzOi8vZG9jcy5jcmV3YWkuY29tJykKCmdwdDRvX21pbmkgPSBMTFAoCiAgICBtb2RlbD0iZ3B0LTZvLW1pbmkiLAopCmdwdDQgPSBMTFAoCiAgICBtb2RlbD0iZ3B0LTZvIiwKKQpncHQxb19taW5pID0gTExNKAp9Cg==